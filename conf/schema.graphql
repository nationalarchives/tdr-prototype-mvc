type Consignment {
  id: Int!
  name: String!
  creator: String!
  transferringBody: String!
  series: Series!
  files: [File!]!
}

input CreateFileInput {
  path: String!
  consignmentId: Int!
  fileSize: Int!
  lastModifiedDate: Instant!
  fileName: String!
  clientSideChecksum: String!
}

input CreateSeriesInput {
  name: String!
  description: String!
}

type File {
  id: UUID!
  path: String!
  consignmentId: Int!
  fileStatus: FileStatus!
  pronomId: String
  fileSize: Int!
  lastModifiedDate: Instant!
  fileName: String!
}

type FileCheckStatus {
  totalComplete: Int!
  totalFiles: Int!
  error: Boolean!
}

type FileStatus {
  id: Int!
  clientSideChecksum: String!
  serverSideChecksum: String!
  fileFormatVerified: Boolean!
  fileId: UUID!
  antivirusStatus: String!
}

scalar Instant

type Mutation {
  createSeries(createSeriesInput: CreateSeriesInput!): Series!
  createConsignment(name: String!, seriesId: Int!, creator: String!, transferringBody: String!): Consignment!
  createFile(createFileInput: CreateFileInput!): File!
  updateServerSideFileChecksum(id: UUID!, checksum: String!): Boolean!
  updateClientSideFileChecksum(id: UUID!, checksum: String!): Boolean!
  updateVirusCheck(id: UUID!, status: String!): Boolean!
  updateFileFormat(id: UUID!, pronomId: String!): Boolean!
  createMultipleFiles(createFileInputs: [CreateFileInput!]!): [File!]!
  createUser(userData: UserInput!): User
  addPassword(passwordInput: PasswordInput!): PasswordInfo
  updatePassword(passwordInput: PasswordInput!): Int!
  removePassword(providerKey: String!): Int!
  addTotp(totp: TotpInfoInput!): TotpInfo
  updateTotp(totp: TotpInfoInput!): Int!
  removeTotp(providerKey: String!): Int!
  createPasswordResetToken(email: String!): PasswordResetToken
  confirmTransfer(id: Int!): Boolean!
}

type PasswordInfo {
  hasher: String!
  password: String!
  salt: String
}

input PasswordInput {
  providerKey: String!
  hasher: String!
  password: String!
  salt: String
}

type PasswordResetToken {
  email: String!
  token: String!
}

type Query {
  getAllSeries: [Series!]!
  getConsignments: [Consignment!]!
  getSeriesForCreator(seriesId: Int!, creator: String!): Series
  getConsignmentForCreator(id: Int!, creator: String!): Consignment
  getConsignment(id: Int!): Consignment
  getFile(id: UUID!): File
  getFiles: [File!]!
  getFileChecksStatus(id: Int!): FileCheckStatus!
  getUser(providerKey: String!, providerId: String!): User
  findPassword(providerKey: String!): PasswordInfo
  findTotp(providerKey: String!): TotpInfo
  isPasswordTokenValid(email: String!, token: String!): Boolean!
}

type Series {
  id: Int!
  name: String!
  description: String!
}

type TotpInfo {
  id: Int!
  providerKey: String!
  sharedKey: String!
  scratchCodes: [TotpScratchCodesOuput!]!
}

input TotpInfoInput {
  providerKey: String!
  sharedKey: String!
  scratchCodes: [TotpScratchCodesInput!]!
}

input TotpScratchCodesInput {
  hasher: String!
  password: String!
  salt: String
}

type TotpScratchCodesOuput {
  id: Int!
  hasher: String!
  password: String!
  salt: String
}

scalar UUID

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  providerId: String!
  providerKey: String!
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  providerId: String!
}